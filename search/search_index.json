{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Riley's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li> <p>Primary author: Riley Chapman</p> </li> <li> <p>Reviewer: Sarah Glenn</p> </li> </ul>"},{"location":"tutorials/rust-setup/#introduction","title":"Introduction","text":"<p>Welcome! In this tutorial you will learn how to set up a basic project from scratch in Rust. By the end of this guide, you'll have set up a new dev container for Rust, created a new project, and written a basic \"Hello COMP423\" program. We are going to start from a blank repository which will help you learn the fundamentals of project setup and configuration. </p>"},{"location":"tutorials/rust-setup/#why-this-matters","title":"Why This Matters","text":"<p>Development containers (dev containers) are a way to set up consistent and reproducible development environments. This ensures everything works the same for everyone, which is super helpful when collaborating with others or learning something new. This fixes the \"but it works on my computer\" issue. Plus, knowing how to set a project up from scratch is a great way to build confidence and learn the basics of Rust!</p>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>(Taken from the COMP 423 MkDocs Tutorial)</p> <p>Before we begin, make sure you have the following:</p> <ol> <li> <p>A GitHub account: If you don\u2019t have one yet, sign up at GitHub.</p> </li> <li> <p>Git installed: Install Git if you don\u2019t already have it.</p> </li> <li> <p>Visual Studio Code (VS Code): Download and install it from here.</p> </li> <li> <p>Docker installed: Required to run the dev container. Get Docker here.</p> </li> <li> <p>Command-line basics: A basic knowledge of how to use the command line.</p> </li> </ol>"},{"location":"tutorials/rust-setup/#part-1-creating-git-repository","title":"Part 1: Creating Git Repository","text":"<p>(Taken from the COMP 423 MkDocs Tutorial)</p>"},{"location":"tutorials/rust-setup/#step-1-create-a-local-directory-and-initialize-git","title":"Step 1: Create a Local Directory and Initialize Git","text":"<p>(1) Open your terminal</p> <p>(2) Create a new directory for your project:</p> <p><pre><code>mkdir rust-tutorial\ncd rust-tutorial\n</code></pre> (3) Initialize a new git repsitory: <pre><code>git init\n</code></pre></p> <p>Note</p> <p>This command creates a new, empty Git repository! This will allow you to track changes and versions of your project. </p> <p>(4) Create a README file: <pre><code>echo \"# Setting up a dev container for Rust\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre></p>"},{"location":"tutorials/rust-setup/#step-2-create-a-remote-repository-on-github","title":"Step 2: Create a Remote Repository on GitHub","text":"<p>(1) Log in to your GitHub account and navigate to the Create a New Repository page.</p> <p>(2) Fill in the details as follows:</p> <ul> <li>Repository Name: rust-tutorial</li> <li>Description: \"Following a tutorial for setting up a dev container for Rust and writing a simple \"Hello COMP423 Program.\"</li> <li>Visibility: Public</li> </ul> <p>(3) Do not initialize the repository with a README, .gitignore, or license.</p> <p>(4) Click Create Repository.</p>"},{"location":"tutorials/rust-setup/#step-3-link-your-local-repository-to-github","title":"Step 3: Link your Local Repository to GitHub","text":"<p>(1) Add the GitHub repository as a remote: <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/rust-tutorial.git\n</code></pre> Replace <code>&lt;your-username&gt;</code> with your GitHub username.</p> <p>(2) Check your default branch name with the subcommand <code>git branch</code>. If it's not <code>main</code>, rename it to <code>main</code> with the following command: <code>git branch -M main</code>. Old versions of git choose the name <code>master</code> for the primary branch, but these days <code>main</code> is the standard primary branch name.</p> <p>(3) Push your local commits to the GitHub repository: <pre><code>git push --set-upstream origin main\n</code></pre></p> <p>(4) Back in your web browser, refresh your GitHub repository to see that the same commit you made locally has now been pushed to remote. You can use git log locally to see the commit ID and message which should match the ID of the most recent commit on GitHub. This is the result of pushing your changes to your remote repository.</p>"},{"location":"tutorials/rust-setup/#part-2-setting-up-the-development-environment","title":"Part 2: Setting Up the Development Environment","text":"<p>(References COMP 423 MkDocs Tutorial)</p>"},{"location":"tutorials/rust-setup/#step-1-add-development-container-configuration","title":"Step 1: Add Development Container Configuration","text":"<ol> <li>In VS Code, open the <code>rust-tutorial</code> directory. You can do this via: File &gt; Open Folder.</li> <li>Install the Dev Containers extension for VS Code.</li> <li>Create a <code>.devcontainer</code> directory in the root of your project with the following file inside of this \"hidden\" configuration directory: <code>.devcontainer/devcontainer.json</code></li> </ol> <p>The <code>devcontainer.json</code> file defines the configuration for your development environment. Here, we're specifying the following:</p> <ul> <li>name: A descriptive name for your dev container.</li> <li>image: The Docker image to use, in this case, the latest version of a Rust environment. We are going to use one of Microsoft's base images.</li> <li>customizations: Adds useful configurations to VS Code, like installing the Rust Analyzer extension.</li> </ul> <pre><code>{\n  \"name\": \"Rust Dev Container\",\n  \"image\": \"mcr.microsoft.com/vscode/devcontainers/rust:latest\",  \n  \"customizations\": {\n    \"vscode\": {\n      \"settings\": {\n        \"rust-analyzer.cargo.runBuildScripts\": true,\n        \"rust-analyzer.procMacro.enable\": true\n      },\n      \"extensions\": [\n        \"rust-lang.rust-analyzer\"\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"tutorials/rust-setup/#step-2-reopen-the-project-in-a-vscode-dev-container","title":"Step 2: Reopen the Project in a VSCode Dev Container","text":"<p>Reopen the project in the container by pressing Ctrl+Shift+P (or Cmd+Shift+P on Mac), typing \"Dev Containers: Reopen in Container,\" and selecting this option.</p> <p>When you open the project in VS Code, it will automatically pull the Rust Docker image, set up the environment, and install the necessary extensions. This ensures you have a consistent and reproducible Rust development setup every time. It might take a minute to load.</p> <p>Once your dev container setup completes, close the current terminal tab (trash can), open a new terminal pane within VSCode, and try running <code>rustc --version</code> to see your dev container is running a recent version of Rust with little effort!</p>"},{"location":"tutorials/rust-setup/#part-3-creating-and-running-a-hello-comp423-program-in-rust","title":"Part 3: Creating and Running a \"Hello COMP423\" Program in Rust","text":"<p>Now that you\u2019ve set up your dev container and initialized a Git repository, let\u2019s write a simple \"Hello COMP423\" program in Rust.</p>"},{"location":"tutorials/rust-setup/#step-1-create-a-new-rust-project","title":"Step 1: Create a New Rust Project","text":"<p>To create a new Rust project, we are going to use Cargo. Cargo is Rust's package manager and build system, similar to pip for Python. Run the following command in the terminal within your dev container: <pre><code>cargo new hello-comp423 --vcs none\n</code></pre></p> <ul> <li><code>cargo new hello-comp423</code> creates a new project named <code>hello-comp423</code>.</li> <li><code>--vcs none</code> ensures that Cargo does not automatically initialize a Git repository for this project, leaving version control to be managed separately or manually later.</li> </ul> <p>This will create a new directory called <code>hello-comp423</code>, with the following default files:</p> <ul> <li><code>Cargo.toml</code>: The manifest file for the project, where dependencies and other project metadata are specified.</li> <li><code>src/main.rs</code>: The default entry point for your program.</li> </ul>"},{"location":"tutorials/rust-setup/#step-2-edit-the-srcmainrs-file","title":"Step 2: Edit the <code>src/main.rs</code> File","text":"<p>Open <code>src/main.rs</code> in VSCode and replace the contents with the following code: <pre><code>fn main() {\n    println!(\"Hello COMP423\");\n}\n</code></pre> This code is a simple Rust program that prints \"Hello COMP423\" to the terminal when run.</p>"},{"location":"tutorials/rust-setup/#step-3-build-and-run-the-project-using-cargo","title":"Step 3: Build and Run the Project Using Cargo","text":"<p>Now that you\u2019ve written the program, you need to build it. Rust uses Cargo to build projects. After <code>cd</code>-ing into your newly created <code>hello-comp423</code> directory, run the following command to compile the project: <pre><code>cargo build\n</code></pre></p> <ul> <li>This command will compile the project and generate an executable file.</li> <li>By default, this output is put in the <code>target/debug directory</code>. The filename will be the same as the project (in this case, <code>hello-comp423</code>).</li> <li>Cargo build is similar to the <code>`gcc</code> command, which is used to compile C programs. They both create an executable file that can be ran manually. To run the executable manually, you would use the following line: <pre><code>./target/debug/hello-comp423\n</code></pre></li> </ul> <p>This should print \"Hello COMP 423\" to the terminal. </p> <p>Alternatively, you can use the <code>cargo run</code> command to compile and run the project in one step: <pre><code>cargo run\n</code></pre></p> <p>This should also print \"Hello COMP 423\" to the terminal.</p> Question <p>What's the difference between <code>cargo build</code> and <code>cargo run</code>?</p> <ul> <li><code>cargo build</code>: Only compiles the project and outputs the executable, but does not run it.</li> <li><code>cargo run</code>: Compiles (if necessary) and then runs the project in one command.</li> </ul>"},{"location":"tutorials/rust-setup/#part-4-stage-and-commit-your-changes-to-github","title":"Part 4: Stage and Commit your Changes to GitHub","text":"<p>Now that you have edited files and written a program, you want to make sure your work is saved and your projects current version is tracked. Since we initialized and connected a Git repo for this project, we can run the following lines to stage your changes, commit them, and push your changes up to the repo you created. <pre><code>git add -A\ngit commit -m \"Finished \"Hello COMP423\" rust tutorial.\"\ngit push\n</code></pre></p> <p>Note</p> <p>You do not have to specify which branch you are pushing to since we used the <code>-u</code> flag when we initially pushed our main branch, connecting our local main branch and our remote main branch.</p>"},{"location":"tutorials/rust-setup/#summary","title":"Summary","text":"<p>Congratulations on finishing the tutorial! To review, you have learned how to:</p> <ul> <li>Set up a new dev container for Rust</li> <li>Initialize a new Git Repository</li> <li>Create a new project in Rust</li> <li>Write, compile, and run a simple \"Hello COMP 423\" program in Rust</li> <li>Track your projects version history by pushing up to a Git repo</li> </ul>"}]}